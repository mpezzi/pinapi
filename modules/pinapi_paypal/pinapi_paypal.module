<?php

/**
 * @file
 * Provides simple PayPal integration.
 */

/**
 * Pinapi PayPal environment constants  
 */
define('PINAPI_PAYPAL_ENV_DEVELOPMENT', 1);
define('PINAPI_PAYPAL_ENV_PRODUCTION', 2);

/**
 * PinAPI Payment status constants
 */
define('PINAPI_PAYPAL_PAYMENT_COMPLETED', 1);
define('PINAPI_PAYPAL_PAYMENT_PENDING', 0);

/**
 * Pinapi PayPal constants required by PayPal
 * @see https://merchant.paypal.com/us/cgi-bin/?cmd=_render-content&content_ID=developer/e_howto_html_Appx_websitestandard_htmlvariables
 */
define('PINAPI_PAYPAL_SHIPPING_REQUIRED', 2);   

// include required functions for populating the pinapi paypal form
require_once(dirname(__FILE__) . '/pinapi_paypal.inc');

/**
 * Implements hook_menu()
 */
function pinapi_paypal_menu() {
  return array(
    'admin/settings/pinapi/paypal' => array(
      'title' => 'Paypal',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('pinapi_paypal_settings_form'),
      'access callback' => 'user_access',
      'access arguments' => array('administer pin api'),
      'file' => 'pinapi_paypal.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 15,
    ),
    'pinapi/paypal' => array(
      'title' => 'Pinapi Paypal',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('pinapi_paypal_form'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'pinapi/paypal/notify' => array(
      'page callback' => 'pinapi_paypal_notify',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'pinapi/paypal/verify' => array(
      'page callback' => 'pinapi_paypal_verify',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function xpinapi_paypal_theme() {
  return array(
    'pinapi_paypal' => array(
      'arguments' => array('paypal' => NULL),
      'template' => 'pinapi-paypal',
      'path' => drupal_get_path('module', 'pinapi_paypal') . '/theme',
      'file' => 'theme.inc',
    ),
  );
}

/**
 * Implements hook_user().
 */
function pinapi_paypal_user($op, &$edit, &$account, $category = NULL) {
  if ( $op == 'load' && user_access('redeem codes') ) {
    $account->pinapi['paypal'] = (bool) db_result(db_query("SELECT status FROM {pinapi_paypal} WHERE uid = %d", $account->uid));
  }
}

/**
 * Displays a 'buy-it-now' type form for PayPal
 */
function pinapi_paypal_form() {
  $environment = pinapi_paypal_environment();
  
  $form['#action'] = $environment['action'];
  $form['#method'] = 'get';
  $form['cmd'] = array(
    '#type' => 'hidden',
    '#value' => '_xclick',
  );
  $form['business'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('pinapi_paypal_business_email', ''),
  );  
  $form['item_name'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('pinapi_paypal_item_name', ''),
  );
  $item_amount = variable_get('pinapi_paypal_item_amount', null);
  if ($item_amount) {
    $form['amount'] = array(
      '#type' => 'hidden',
      '#value' => $item_amount,
    );
  }
  $item_number = variable_get('pinapi_paypal_item_number', null);
  if ($item_number) {
    $form['item_number'] = array(
      '#type' => 'hidden',
      '#value' => $item_number,
    );
  }
  $form['shipping'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('pinapi_paypal_shipping_rate', ''),
  );
  $form['page_style'] = array(
    '#type' => 'hidden',
    '#value' => 'PayPal',
  );
  $form['no_shipping'] = array(
    '#type' => 'hidden',
    '#value' => PINAPI_PAYPAL_SHIPPING_REQUIRED,
  );
  $form['cancel_return'] = array(
    '#type' => 'hidden',
    '#value' => url(variable_get('pinapi_paypal_cancel_return_path', ''), array('absolute' => TRUE)),
  );
  $form['notify_url'] = array(
    '#type' => 'hidden',
    '#value' => url(variable_get('pinapi_paypal_notify_path', ''), array('absolute' => TRUE)),
  );
  $form['return'] = array(
    '#type' => 'hidden',
    '#value' => url(variable_get('pinapi_paypal_return_path', ''), array('absolute' => TRUE)),
  );
  $form['currency_code'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('pinapi_paypal_currency_code', ''),
  );
  $form['lc'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('pinapi_paypal_language_code', ''),
  );
  $form['bn'] = array(
    '#type' => 'hidden',
    '#value' => 'BuyNow',
  );
  $form['custom'] = array(
    '#type' => 'hidden',
    '#value' => $GLOBALS['user']->uid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * Responds to POSTed data from PayPal IPN, stores to db if verified
 */
function pinapi_paypal_notify() {
  watchdog('pinapi_paypal', json_encode($_POST));

  // create a request query string using POST vars
  $query = array();
  $query['cmd'] = '_notify-validate';
  $query = array_merge($query, $_POST);
  $data = drupal_query_string_encode($query);

  // send request to PayPal to verify transaction being referenced
  $environment = pinapi_paypal_environment();
  $response = drupal_http_request($environment['action'], array(), 'POST', $data, 3);
  watchdog('pinapi_paypal', t("Verification response received: '@data'"), array('@data' => $response->data));

  // only process this POST if verified by PayPal
  if ( $response->data == 'VERIFIED' ) {
    watchdog('pinapi_paypal', t("Received verified transaction."));

    // attempt to load the transaction details for this uid.
    // Check if a transaction has been previously inserted into db for this user
    // (ex. from a payment marked PENDING)
    $account = pinapi_paypal_load($_POST['custom']);
    if (!$account) {
      $account->is_new = TRUE;
    }
    // set up transaction details to be potentially recorded
    $account->uid = $_POST['custom'];
    $account->tid = $_POST['txn_id'];
    $account->data = serialize($_POST);

    // validate this transaction against the account we have on record and
    // this site's pinapi_paypal module configuration details
    $valid_transaction = pinapi_paypal_verify_transaction($_POST['txn_id'], $_POST['business'], $_POST['mc_gross'], $account);

    if ($valid_transaction) {
      if ( isset($_POST['payment_status']) && $_POST['payment_status'] == 'Completed' ) {
        if ( $account->is_new ) {
          // create a new transaction record
          $account->status = PINAPI_PAYPAL_PAYMENT_COMPLETED;
          pinapi_paypal_save($account);
          watchdog('pinapi_paypal', t("New transaction record created."));
        }
        else {
          // check that this is an update to a previously 'pending' transaction
          if ( $account->status == PINAPI_PAYPAL_PAYMENT_PENDING ) {
            // update payment status to be 'Completed'
            $account->status = PINAPI_PAYPAL_PAYMENT_COMPLETED;
            pinapi_paypal_save($account);
            watchdog('pinapi_paypal', t("Transaction record was updated for uid: @uid"), array('@uid' => $account->uid));
          }
        }
      }
      elseif ( isset($_POST['payment_status']) && $_POST['payment_status'] == 'Pending' ) {
        // handle successful payments marked as 'PENDING' (ex. e-cheque)
        // log reason for pending status
        $account->status = PINAPI_PAYPAL_PAYMENT_PENDING;
        pinapi_paypal_save($account);
        watchdog('pinapi_paypal', t("PayPal payment marked as PENDING because of '@reason': '@data'"), array('@data' => serialize($_POST), '@reason' => $_POST['pending_reason']),  WATCHDOG_WARNING);
      }
      elseif ( isset($_POST['payment_status']) && $_POST['payment_status'] == 'Denied' ) {
        // handle payments with status marked as 'DENIED'
        watchdog('pinapi_paypal', t("PayPal payment marked as DENIED because of '@reason': '@data'"), array('@data' => serialize($_POST), '@reason' => $_POST['pending_reason']),  WATCHDOG_WARNING);
      }
      else {
        // handle any other cases where payment status was none of the above
        watchdog('pinapi_paypal', t("PayPal payment cannot be processed because of status '@status': '@data'"), array('@data' => serialize($_POST), '@status' => $_POST['status']),  WATCHDOG_WARNING);
      }
    }
    print '';
  }
  else {
    watchdog('pinapi_paypal', t("Received invalid transaction..."), array(), WATCHDOG );
    // log this POST with a warning
    watchdog('pinapi_paypal', t("Flagged suspicious PayPal submission: '@data'"), array('@data' => serialize($_POST)), WATCHDOG_ALERT);
  }
}

function xpinapi_paypal_form_submit($form, &$form_state) {
  dsm($form_state);
}