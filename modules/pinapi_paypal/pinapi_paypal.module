<?php

/**
 * @file
 * Provides simple PayPal integration.
 * @see http://www.micahcarrick.com/paypal-ipn-with-php.html
 * @see https://github.com/Quixotix/PHP-PayPal-IPN
 */

require_once dirname(__FILE__) . '/pinapi_paypal.inc';

/**
 * Implements hook_menu().
 */
function pinapi_paypal_menu() {
  return array(
    'pinapi/paypal' => array(
      'title' => 'Pinapi Paypal',
      'page callback' => 'pinapi_paypal_view',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'pinapi/paypal/ipn' => array(
      'page callback' => 'pinapi_paypal_ipn',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'admin/settings/pinapi/paypal' => array(
      'title' => 'Paypal',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('pinapi_paypal_settings_form'),
      'access callback' => 'user_access',
      'access arguments' => array('administer pin api'),
      'file' => 'pinapi_paypal.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 15,
    ),
  );
}

/**
 * Page Callback: Paypal View.
 */
function pinapi_paypal_view() {
  // Extra markup or form elements.
  $form['test'] = array(
    '#type' => 'item',
    '#value' => 'test',
  );

  // PayPal hidden keys and values.
  $data = array(
    'items' => array(
      array('name' => 'test', 'amount' => 9.25, 'quantity' => 1),
      array('name' => 'test2', 'amount' => 18.25, 'quantity' => 1),
    ),
    'setting' => 'value',
  );

  return drupal_get_form('pinapi_paypal_payment_form', $form, $data);
}

/**
 * Page Callback: Paypal Instant Payment Notification.
 */
function pinapi_paypal_ipn() {
  module_load_include('php', 'pinapi_paypal', 'lib/ipnlistener');

  // Get our post data.
  $data = $_POST;

  // Load PHP-Paypal-IPN library.
  $ipn = new IpnListener();
  $ipn->use_sandbox = variable_get('pinapi_paypal_sandbox', TRUE);

  // Debug the data being processed.
  if ( variable_get('pinapi_paypal_debug', FALSE) ) {
    watchdog('pinapi_paypal', 'IPN Debug ' . json_encode($data));
  }

  // Try to verify the IPN, catch and log errors.
  try {
    $ipn->requirePostMethod();
    $verified = $ipn->processIpn();
  } catch ( Exception $e ) {
    watchdog('pinapi_paypal', 'IPN Error ' . $e->getMessage(), array(), WATCHDOG_ERROR);
  }

  // IPN is verified, continue with data checks.
  if ( $verified ) {

    // Load current order transaction, will be set to FALSE if it doesn't already exist.
    $order = pinapi_paypal_order_load($data['txn_id']);

    // Check for fraudulent transaction attempts.
    $ftas = array();

    // Fraudulent transaction attempt: Ensure receiver email is ours.
    if ( $data['receiver_email'] != variable_get('pinapi_paypal_receiver_email', '') ) {
      $ftas['receiver_email'] = t('Merchant account is not same as systems.');
    }

    // If there are no fraudulent transaction attempts save or update this order.
    if ( count($ftas) == 0 ) {

      // Order doesn't exists yet, set some initial fields.
      if ( !$order ) {
        $order = (object) array(
          'txnid' => $data['txn_id'],
          'uid' => 1,
          'payer_email' => $data['payer_email'],
          'mc_gross' => $data['mc_gross'],
        );
      }

      // Update payment status and time 'updated' and save order.
      $order->payment_status = pinapi_paypal_status_code($data['payment_status']);
      $order->updated = time();

      // Save this order transaction.
      pinapi_paypal_order_save($order);

      watchdog('pinapi_paypal', 'IPN Verified ' . $ipn->getTextReport());
    }
    // Fraudulent activity has been detected. Log as critical.
    else {
      watchdog('pinapi_paypal', 'IPN Fraudulent Activity Detected (' . implode(', ', $ftas) . ')', array(), WATCHDOG_CRITICAL);
    }
  }
  // IPN is invalid.
  else {
    watchdog('pinapi_paypal', 'IPN Invalid ' . $ipn->getTextReport(), array(), WATCHDOG_WARNING);
  }
}