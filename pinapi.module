<?php 

/**
 * @file
 * A generalized Pin API for Drupal.
 */

/**
 * Default salt string to use when generating codes.
 */
define('PINAPI_CODE_GENERATE_SALT', '123456789');

require_once dirname(__FILE__) . '/includes/pinapi.inc';
require_once dirname(__FILE__) . '/includes/pinapi.group.inc';
require_once dirname(__FILE__) . '/includes/pinapi.code.inc';


/**
 * Implements hook_theme().
 */
function pinapi_theme() {
  return array(
    'pinapi_redeem_form' => array(
      'arguments' => array('form' => NULL, 'group' => NULL),
      'template' => 'pinapi-redeem-form',
      'path' => drupal_get_path('module', 'pinapi') . '/theme',
      'file' => 'theme.inc',
    ),
  );
}

/**
 * Implements hook_perm().
 */
function pinapi_perm() {
  return array(
    'administer pin api',
    'redeem codes',
  );
}

/**
 * Implements hook_menu().
 */
function pinapi_menu() {
  return array(
    'admin/settings/pinapi' => array(
      'title' => 'Pin API',
      'description' => 'Global settings for the Pin API',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('pinapi_settings_form'),
      'access callback' => 'user_access',
      'access arguments' => array('administer pin api'),
      'file' => 'pinapi.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/settings/pinapi/general' => array(
      'title' => 'General',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ),
    'pinapi/%pinapi_group' => array(
      'title' => 'Pin API Test',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('pinapi_redeem_form', 1),
      'access callback' => 'user_access',
      'access arguments' => array('redeem codes'),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function pinapi_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'pinapi') . '/views',
  );
}

/**
 * Implements hook_user().
 */
function pinapi_user($op, &$edit, &$account) {
  // Load the number of codes redeemed for each group.
  if ( $op == 'load' && user_access('redeem codes') ) {
    $account->pinapi['redeemed'] = array();
    $result = db_query("SELECT * FROM {pinapi_code_redeemed_cache} WHERE uid = %d", $account->uid);
    while ( $cache = db_fetch_object($result) ) {
      $account->pinapi['redeemed'][$cache->gid] = $cache->value;
    }
  }
}

/**
 * Implements hook_pinapi_code_generator().
 */
function pinapi_pinapi_code_generator() {
  return array(
    'generic' => array(
      'name' => t('Generic'),
      'callback' => 'pinapi_code_generate_generic',
      'options' => array(
        'salt' => variable_get('pinapi_code_generate_salt', PINAPI_CODE_GENERATE_SALT),
        'length' => 12,
      ),
    ),
  );
}

/**
 * Redeem form.
 */
function pinapi_redeem_form(&$form_state, $group) {
  global $user;

  // Set the current user as the account to redeem code for.
  if ( $user->uid ) {
    $user = user_load($user->uid);
  }

  if ( $group->status ) {
    $form['code'] = array(
      '#type' => 'textfield',
      '#title' => t('Enter your pin'),
      '#size' => 20,
      '#maxlength' => 32,
      '#required' => TRUE,
      '#attributes' => array(
        'class' => 'pinapi-code',
      ),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  }
  else {
    $form['status'] = array(
      '#type' => 'item',
      '#value' => variable_get('pinapi_message_closed', 'The contest is currently unavailable.'),
    );
  }

  $form['gid'] = array(
    '#type' => 'hidden',
    '#value' => $group->gid,
  );

  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $user->uid,
  );

  return $form;
}

/**
 * Validate Callback: Redeem form.
 */
function pinapi_redeem_form_validate($form, &$form_state) {
  $string = $form_state['values']['code'];
  $group = pinapi_group_load($form_state['values']['gid']);
  $account = user_load($form_state['values']['uid']);

  if ( !empty($string) && !pinapi_code_verify($string, $group, $account) ) {
    form_set_error('code', t("The pin you have entered isn't redeemable or has already been redeemed."));
  }
}

/**
 * Submit Callback: Redeem form.
 */
function pinapi_redeem_form_submit($form, &$form_state) {
  $string = $form_state['values']['code'];
  $group = pinapi_group_load($form_state['values']['gid']);
  $account = user_load($form_state['values']['uid']);

  if ( pinapi_redeem($string, $group, $account) ) {
    drupal_set_message(t('Congratulations! You have successfully redeemed a pin!'));
  }
  else {
    drupal_set_message(t('Unable to redeem pin. Please contact the administrator.'), 'error');
  }
}
