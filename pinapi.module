<?php

/**
 * @file
 * Provides an API for Pin functionality.
 */

require_once dirname(__FILE__) . '/includes/core.inc';
require_once dirname(__FILE__) . '/includes/pin.inc';
require_once dirname(__FILE__) . '/includes/collection.inc';
require_once dirname(__FILE__) . '/includes/txn.inc';


/**
 * Implements hook_permission().
 */
function pinapi_permission() {
  return array(
    'administer pins' => array(
      'title' => t('Administer pins'),
      'description' => t('Access the pin administration pages.')
    ),
    'use pins' => array(
      'title' => t('Use pins'),
      'description' => t('Access to use pins.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pinapi_menu() {
  $items['admin/structure/pin'] = array(
    'title' => 'Pins',
    'description' => 'Manage pins and collections.',
    'page callback' => 'pinapi_admin_overview',
    'access arguments' => array('administer pins'),
    'file' => 'pinapi.admin.inc',
  );

  $items['admin/structure/pin/collection/add'] = array(
    'title' => 'Add collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_collection'),
    'access arguments' => array('administer pins'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/structure/pin/collection/%pinapi_collection/edit'] = array(
    'title' => 'Edit collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_collection', 4),
    'access arguments' => array('administer pins'),
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/structure/pin/collection/%pinapi_collection/delete'] = array(
    'title' => 'Delete collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_collection_delete', 4),
    'access arguments' => array('administer pins'),
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/structure/pin/collection/%pinapi_collection/update'] = array(
    'title' => 'Update collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_collection_update', 4),
    'access arguments' => array('administer pins'),
    'file' => 'pinapi.admin.inc',
  );

  $items['pin/transaction/%pinapi_txn'] = array(
    'title' => 'View transaction',
    'description' => 'View transaction',
    'page callback' => 'pinapi_transaction_view',
    'page arguments' => array(2),
    'access arguments' => array('administer pins'),
    'file' => 'pinapi.admin.inc',
  );
  $items['pin/transaction/%pinapi_txn/edit'] = array(
    'title' => 'Edit transaction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_transaction', 2),
    'access arguments' => array('administer pins'),
    'file' => 'pinapi.admin.inc',
  );
  $items['pin/transaction/%pinapi_txn/delete'] = array(
    'title' => 'Delete transaction',
    'description' => 'Delete transaction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_transaction_delete', 2),
    'access arguments' => array('administer pins'),
    'file' => 'pinapi.admin.inc',
  );

  $items['pin/pin/%pinapi_pin/edit'] = array(
    'title' => 'Edit pin',
    'description' => 'Edit pin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_pin', 2),
    'access arguments' => array('administer pins'),
    'file' => 'pinapi.admin.inc',
  );
  $items['pin/pin/%pinapi_pin/delete'] = array(
    'title' => 'Delete pin',
    'description' => 'Delete pin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_pin_delete', 2),
    'access arguments' => array('administer pins'),
    'file' => 'pinapi.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function pinapi_admin_paths() {
  $paths = array(
    'pin/transaction/*' => TRUE,
    'pin/transaction/*/edit' => TRUE,
    'pin/transaction/*/edit/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_theme().
 */
function xpinapi_theme() {

}

/**
 * Implements hook_views_api().
 */
function pinapi_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_block_info().
 */
function pinapi_block_info() {
  $blocks = array();
  foreach ( pinapi_collection_load_all() as $collection ) {
    $blocks['collection_' . $collection->cid] = array(
      'info' => t('Pin Collection Redeem Form (@name)', array('@name' => $collection->name)),
      'cache' => DRUPAL_NO_CACHE,
    );
    $blocks['stat_' . $collection->cid] = array(
      'info' => t('Pin API Statistics (@name)', array('@name' => $collection->name)),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pinapi_block_view($delta = '') {
  list($type, $id) = explode('_', $delta);

  $block = array();
  switch ( $type ) {
    case 'collection':
      if ( user_access('use pins') && $collection = pinapi_collection_load($id) ) {
        $block['subject'] = t('Collection Redeem Form (@name)', array('@name' => $collection->name));
        $block['content'] = drupal_get_form('pinapi_collection_block_form', $collection);
      }
      break;
    case 'stat':
      if ( user_access('use pins') && $collection = pinapi_collection_load($id) ) {
        $block['subject'] = t('Pin API Statistics (@name)', array('@name' => $collection->name));
        $block['content'] = pinapi_txn_stats_get($GLOBALS['user']->uid, $collection->cid, 'total');
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_forms().
 */
function pinapi_forms() {
  return array(
    'pinapi_collection_block_form' => array(
      'callback' => 'pinapi_collection_block_form',
      'callback arguments' => array('pinapi_collection_block_form'),
    ),
  );
}

/**
 * Form: Collection Block Form.
 */
function pinapi_collection_block_form($form, &$form_state, $collection) {
  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Code'),
    '#default_value' => '',
    '#size' => 20,
    '#required' => TRUE,
  );
  $form['collection'] = array(
    '#type' => 'value',
    '#value' => $collection,
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Enter'),
  );

  return $form;
}

/**
 * Form Validation Handler: Collection Block Form.
 */
function pinapi_collection_block_form_validate($form, &$form_state) {
  if ( !empty($form_state['values']['code']) ) {

    // Create a transaction object.
    $txn = pinapi_txn($form_state['values']['code'], $form_state['values']['collection']->cid);

    // Show appripriate error message based on transaction status.
    switch ( $txn->txn_status ) {
      case PINAPI_STATUS_UNAVAILABLE:
        form_set_error('code', t('The code you have entered has already been used.'));
        break;
      case PINAPI_STATUS_CLOSED:
        form_set_error('code', t('Codes are not being accepted at this time.'));
        break;
      case PINAPI_STATUS_NOT_FOUND:
        form_set_error('code', t('The code you have entered is not valid.'));
        break;
    }

    // Show message if not redeemable.
    if ( !$txn->redeemable ) {
      form_set_error('code', t('The code you have entered is not redeemable at this time.'));
    }

    // Pass transaction to submit handler.
    $form_state['values']['txn'] = $txn;
  }
}

/**
 * Form Submit Handler: Collection Block Form.
 */
function pinapi_collection_block_form_submit($form, &$form_state) {
  if ( $form_state['values']['txn']->redeemable ) {
    pinapi_txn_redeem($form_state['values']['txn']);
    drupal_set_message(t('Congratulations! Your code has been entered successfully.'));
    drupal_goto('<front>');
  }
}
