<?php 

/**
 * @file
 * A generalized Pin API for Drupal.
 */

/**
 * Default salt string to use when generating codes.
 */
define('PINAPI_CODE_GENERATE_SALT', '123456789');

require_once dirname(__FILE__) . '/includes/pinapi.inc';
require_once dirname(__FILE__) . '/includes/pinapi.group.inc';
require_once dirname(__FILE__) . '/includes/pinapi.code.inc';


/**
 * Implements hook_perm().
 */
function pinapi_perm() {
  return array(
    'administer pin api', 
    'debug pin api', 
    'redeem codes',
  );
}

/**
 * Implements hook_menu().
 */
function pinapi_menu() {
  return array(
    'admin/settings/pinapi' => array(
      'title' => 'Pin API',
      'description' => 'Global settings for the Pin API',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('pinapi_settings_form'),
      'access callback' => 'user_access',
      'access arguments' => array('administer pin api'),
      'file' => 'pinapi.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/settings/pinapi/general' => array(
      'title' => 'General',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ),
    'pinapi/%pinapi_group' => array(
      'title' => 'Pin API Test',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('pinapi_redeem_form', 1),
      'access callback' => 'user_access',
      'access arguments' => array('redeem codes'),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function pinapi_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'pinapi') . '/views',
  );
}

/**
 * Implements hook_pinapi_code_generator().
 */
function pinapi_pinapi_code_generator() {
  return array(
    'generic' => array(
      'name' => t('Generic'),
      'callback' => 'pinapi_code_generate_generic',
      'options' => array(
        'salt' => variable_get('pinapi_code_generate_salt', PINAPI_CODE_GENERATE_SALT),
        'length' => 12,
      ),
    ),
  );
}

/**
 * Redeem form.
 */
function pinapi_redeem_form(&$form_state, $group) {
  global $user;

  $form_state['storage']['account'] = user_load($user->uid);
  $form_state['storage']['group'] = $group;

  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter your pin'),
    '#size' => 20,
    '#maxlength' => 32,
    '#required' => TRUE,
  );

  $form['gid'] = array(
    '#type' => 'hidden',
    '#value' => $group->gid,
  );

  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $user->uid,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Validate Callback: Redeem form.
 */
function pinapi_redeem_form_validate($form, &$form_state) {
  $string = $form_state['values']['code'];
  $group = $form_state['storage']['group'];
  $account = $form_state['storage']['account'];

  if ( !empty($string) && !pinapi_code_verify($string, $group, $account) ) {
    form_set_error('code', t("The pin you have entered isn't redeemable or has already been redeemed."));
  }
}

/**
 * Submit Callback: Redeem form.
 */
function pinapi_redeem_form_submit($form, &$form_state) {
  $string = $form_state['values']['code'];
  $group = $form_state['storage']['group'];
  $account = $form_state['storage']['account'];

  drupal_set_message( pinapi_redeem($string, $group, $account) ? t('Yep') : t('Nope') );
}














/**
 * Implements hook_block().
 */
function xpinapi_block($op = 'list', $delta = 0, $edit = array()) {
  switch ( $op ) {
    case 'list':
      $blocks = array();
      foreach ( pinapi_pools_select() as $pool ) {
        $blocks['pinapi_code_form_' . $pool['pool_id']] = array(
          'info' => t('Code Redeem Form !pool_id', array('!pool_id' => $pool['pool_id'])),
          'pool_id' => $pool['pool_id'],
        );
        $blocks['pinapi_pool_prizes_' . $pool['pool_id']] = array(
          'info' => t('Pool Prizes !pool_id', array('!pool_id' => $pool['pool_id'])),
          'pool_id' => $pool['pool_id'],
        );
      }
      
      return $blocks;
    case 'view':
      if ( strpos($delta, 'pinapi_code_form_') !== FALSE ) {
        $pool_id = str_replace('pinapi_code_form_', '', $delta);
        
        return array(
          'subject' => t('Code'),
          'content' => drupal_get_form('pinapi_code_redeem_form', $pool_id),
        );
      }
      elseif ( strpos($delta, 'pinapi_pool_prizes_') !== FALSE ) {
        $pool_id = str_replace('pinapi_pool_prizes_', '', $delta);
        
        $prizes = array();
        foreach ( pinapi_pool_prizes($pool_id, $GLOBALS['user']) as $prize ) {
          $prizes[] = array(
            'class' => 'prize-' . $prize['pid'],
            'data' => pinapi_prize_link($prize),
          );
        }
        
        return array(
          'subject' => t('Prizes'),
          'content' => theme('item_list', $prizes),
        );
      }
  }
}

/**
 * Menu Callback: Load redeemed prize.
 */
function xpinapi_redeemed_prize_load($crid) {
  static $prizes;
  
  if ( !isset($prizes[$crid]) ) {
    $sql  = "SELECT * FROM {pinapi_code_redeemed} cr ";
    $sql .= "INNER JOIN {pinapi_prize} p ON cr.pid = p.pid ";
    $sql .= "WHERE cr.crid = %d LIMIT 1";
    
    if ( $prize = db_fetch_array(db_query($sql, $crid)) ) {
      $prize['title'] = t('Prize');
      _pinapi_invoke('prize_redeemed_load', $prize);
      $prizes[$crid] = $prize;
    }
  }
  
  if ( isset($prizes[$crid]) ) {
    return $prizes[$crid];
  }
  
  return FALSE;
}

/**
 * Define redeemed prizes access.
 */
function xpinapi_prize_access($prize, $account = NULL) {
  global $user;
  
  // If no user object is supplied, the access check is for the current user.
  if ( empty($account) ) {
    $account = $user;
  }
  
  if ( user_access('view any redeemed prizes', $account) ) {
    return TRUE;
  }
  
  if ( user_access('view own redeemed prizes', $account) && $prize['uid'] == $account->uid ) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Title Callback.
 */
function xpinapi_prize_page_title($prize) {
  return $prize['title'];
}

/**
 * Menu Callback: view a single redeemed prize.
 */
function xpinapi_prize_page_view($prize) {
  //drupal_set_title(check_plain($prize['title']));
  return pinapi_prize_show($prize);
}

/**
 * Generate a page displaying a single redeemed prize.
 */
function xpinapi_prize_show($prize) {
  return pinapi_prize_view($prize, FALSE, TRUE);
}

/**
 * Generate a display of the given redeemed prize.
 */
function xpinapi_prize_view($prize, $teaser = FALSE, $page = TRUE) {
  _pinapi_invoke('prize_redeemed_view', $prize, $teaser, $page);
  return theme('prize', $prize);
}
