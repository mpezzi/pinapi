<?php

/**
 * @file
 * Provides an API for Pin functionality.
 */

require_once dirname(__FILE__) . '/includes/core.inc';
require_once dirname(__FILE__) . '/includes/pin.inc';
require_once dirname(__FILE__) . '/includes/collection.inc';
require_once dirname(__FILE__) . '/includes/txn.inc';
require_once dirname(__FILE__) . '/includes/cache.inc';
require_once dirname(__FILE__) . '/includes/test.inc';


/**
 * Implements hook_permission().
 */
function pinapi_permission() {
  return array(
    'administer pin api' => array(
      'title' => t('Administer pins'),
      'description' => t('Access the pin administration pages.')
    ),
    'use pins' => array(
      'title' => t('Use pins'),
      'description' => t('Access to use pins.'),
    ),
    'use test pins' => array(
      'title' => t('Use test pins'),
      'description' => t('Access to use test pins.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pinapi_menu() {
  $items = array();

  $items['admin/pinapi'] = array(
    'title' => 'Pins',
    'description' => 'Administer your pins.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );

  $items['admin/pinapi/collection'] = array(
    'title' => 'Collections',
    'description' => 'Manage your pin collections.',
    'page callback' => 'pinapi_admin_collection_view',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/pinapi/collection/add'] = array(
    'title' => 'Create Collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_collection'),
    'access arguments' => array('administer pin api'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/pinapi/collection/%pinapi_collection/edit'] = array(
    'title' => 'Edit collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_collection', 3),
    'access arguments' => array('administer pin api'),
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/pinapi/collection/%pinapi_collection/delete'] = array(
    'title' => 'Delete collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_collection_delete', 3),
    'access arguments' => array('administer pin api'),
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/pinapi/collection/%pinapi_collection/calculate'] = array(
    'title' => 'Calculate collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_collection_calculate', 3),
    'access arguments' => array('administer pin api'),
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/pinapi/collection/%pinapi_collection/reset'] = array(
    'title' => 'Reset collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_collection_reset', 3),
    'access arguments' => array('administer pin api'),
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/pinapi/collection/%pinapi_collection/clear'] = array(
    'title' => 'Clear collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_collection_clear', 3),
    'access arguments' => array('administer pin api'),
    'file' => 'pinapi.admin.inc',
  );

  $items['admin/pinapi/transaction'] = array(
    'title' => 'Transactions',
    'description' => 'Manage your pin transactions.',
    'page callback' => 'pinapi_admin_transaction_overview',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/pinapi/transaction/%pinapi_txn'] = array(
    'title' => 'View transaction',
    'description' => 'View transaction',
    'page callback' => 'pinapi_transaction_view',
    'page arguments' => array(3),
    'access arguments' => array('administer pin api'),
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/pinapi/transaction/%pinapi_txn/edit'] = array(
    'title' => 'Edit transaction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_transaction', 3),
    'access arguments' => array('administer pin api'),
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/pinapi/transaction/%pinapi_txn/delete'] = array(
    'title' => 'Delete transaction',
    'description' => 'Delete transaction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_transaction_delete', 3),
    'access arguments' => array('administer pin api'),
    'file' => 'pinapi.admin.inc',
  );

  $items['admin/pinapi/pin'] = array(
    'title' => 'Pins',
    'description' => 'Manage your pins.',
    'page callback' => 'pinapi_admin_pin_overview',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/pinapi/pin/%pinapi_pin/edit'] = array(
    'title' => 'Edit pin',
    'description' => 'Edit pin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_pin', 3),
    'access arguments' => array('administer pin api'),
    'file' => 'pinapi.admin.inc',
  );
  $items['admin/pinapi/pin/%pinapi_pin/delete'] = array(
    'title' => 'Delete pin',
    'description' => 'Delete pin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinapi_form_pin_delete', 3),
    'access arguments' => array('administer pin api'),
    'file' => 'pinapi.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function pinapi_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_block_info().
 */
function pinapi_block_info() {
  $blocks = array();
  foreach ( pinapi_collection_load_all() as $collection ) {
    $blocks['collection_' . $collection->cid] = array(
      'info' => t('Pin API Collection Form (@name)', array('@name' => $collection->name)),
      'cache' => DRUPAL_NO_CACHE,
    );
    $blocks['txn-total_' . $collection->cid] = array(
      'info' => t('Pin API Transaction Total (@name)', array('@name' => $collection->name)),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pinapi_block_view($delta = '') {
  list($type, $id) = explode('_', $delta);

  $block = array();
  if ( isset($type) && isset($id) ) {
    switch ( $type ) {
      case 'collection':
        if ( user_access('use pins') && $collection = pinapi_collection_load($id) ) {
          $block['subject'] = t('Pin API Collection Form (@name)', array('@name' => $collection->name));
          $block['content'] = drupal_get_form('pinapi_collection_block_form', $collection);
        }
        break;
      case 'txn-total':
        if ( user_access('use pins') && $collection = pinapi_collection_load($id) ) {
          $block['subject'] = t('Pin API Transaction Total (@name)', array('@name' => $collection->name));
          $block['content'] = pinapi_cache_get($GLOBALS['user']->uid, $collection->cid, 'txn_total');
        }
        break;
    }
  }

  return $block;
}

/**
 * Implements hook_forms().
 */
function pinapi_forms() {
  return array(
    'pinapi_collection_block_form' => array(
      'callback' => 'pinapi_collection_block_form',
      'callback arguments' => array('pinapi_collection_block_form'),
    ),
  );
}

/**
 * Form: Collection Block Form.
 */
function pinapi_collection_block_form($form, &$form_state, $collection) {
  $form['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Code'),
    '#default_value' => '',
    '#size' => 20,
    '#required' => TRUE,
  );
  $form['collection'] = array(
    '#type' => 'value',
    '#value' => $collection,
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Enter'),
  );

  $form['#id'] = 'pinapi-collection-block-form-' . $collection->machine_name;
  $form['#attributes']['class'][] = 'pinapi-collection-block-form';

  return $form;
}

/**
 * Form Validation Handler: Collection Block Form.
 */
function pinapi_collection_block_form_validate($form, &$form_state) {
  global $user;

  if ( !empty($form_state['values']['code']) ) {

    // Create a transaction object.
    $txn = pinapi_txn($form_state['values']['code'], $form_state['values']['collection']->cid);

    // Invoke hook_pinapi_txn with validate operation.
    pinapi_invoke('pinapi_txn', 'validate', $txn);

    // Show appripriate error message based on transaction status.
    switch ( $txn->txn_status ) {
      case PINAPI_STATUS_UNAVAILABLE:
        form_set_error('code', t('The code you have entered has already been used.'));
        watchdog('pinapi', 'Failed pin transaction with @code (already used)', array('@code' => $txn->code), WATCHDOG_NOTICE, l('view user', 'user/' . $txn->uid));
        break;
      case PINAPI_STATUS_CLOSED:
        form_set_error('code', t('Codes are not being accepted at this time.'));
        break;
      case PINAPI_STATUS_NOT_FOUND:
        form_set_error('code', t('The code you have entered is not valid.'));
        watchdog('pinapi', 'Failed pin transaction with @code (not found)', array('@code' => $txn->code), WATCHDOG_NOTICE, l('view user', 'user/' . $txn->uid));
        break;
    }

    // Only users with "use test pins" permissions can redeem test pins.
    if ( isset($txn->pin->test) && $txn->pin->test && !user_access('use test pins') ) {
      form_set_error('code', t('Your account cannot redeem test pins.'));
      watchdog('pinapi', 'Failed pin transaction with @code (test pin)', array('@code' => $txn->code), WATCHDOG_WARNING, l('view user', 'user/' . $txn->uid));
    }

    // Show message if not redeemable.
    if ( !$txn->redeemable ) {
      // @TODO: Does this actually get to do anything?
      form_set_error('code', t('The code you have entered is not redeemable at this time.'));
      //watchdog('pinapi', 'Failed pin transaction with @code (not redeemable)', array('@code' => $txn->code), WATCHDOG_NOTICE, l('view user', 'user/' . $txn->uid));
    }

    // Pass transaction to submit handler.
    $form_state['values']['txn'] = $txn;
  }
}

/**
 * Form Submit Handler: Collection Block Form.
 */
function pinapi_collection_block_form_submit($form, &$form_state) {
  global $user;

  $txn = $form_state['values']['txn'];

  if ( $txn->redeemable ) {
    // Finalize and redeem transaction.
    pinapi_txn_redeem($txn);

    // @TODO: Find a better way to show messages.
    //drupal_set_message(t('Congratulations! Your code has been entered successfully.'));
    watchdog('pinapi', 'Redeemed pin transaction with @code', array('@code' => $txn->pin->code), WATCHDOG_NOTICE, l('edit', 'admin/pinapi/transaction/' . $txn->txn_id . '/edit'));

    // Invoke hook_pinapi_txn with validate operation.
    pinapi_invoke('pinapi_txn', 'submit', $txn);

    // @TODO: Find a better way to redirect.
    //drupal_goto('<front>');
  }
}
