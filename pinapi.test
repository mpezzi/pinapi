<?php

/**
 * @file
 * Tests for pinapi.module
 */


class PinAPITestCase extends DrupalWebTestCase {

  /**
   * Returns a new collection with random properties.
   */
  function createCollection() {
    // Create a collection.
    $collection = new stdClass();
    $collection->name = $this->randomName();
    $collection->machine_name = drupal_strtolower($this->randomName());
    $collection->description = $this->randomName();
    $collection->status = TRUE;
    pinapi_collection_save($collection);
    return $collection;
  }

  /**
   * Returns a new pin with random properties.
   */
  function createPin($collection, $quantity = 1) {
    $pin = new stdClass();
    $pin->cid = $collection->cid;
    $pin->code = $this->randomName();
    $pin->quantity = $quantity;
    $pin->status = TRUE;
    pinapi_pin_save($pin);
    return $pin;
  }

}

/**
 * Tests for the pinapi collection interface.
 */
class PinAPICollectionInterfaceTest extends PinAPITestCase {

  public static function getInfo() {
    return array(
      'name' => 'Pin API Collection Interface',
      'description' => 'Test the pin collection interface.',
      'group' => 'Pin API',
    );
  }

  function setUp() {
    parent::setUp('pinapi');
    $this->admin_user = $this->drupalCreateUser(array('administer pins'));
    $this->drupalLogin($this->admin_user);
    $this->collection = $this->createCollection();
  }

  /**
   * Create, edit and delete a collection via the user inferface.
   */
  function testCollectionInterface() {
    // Visit the pin overview page.
    $this->drupalGet('admin/structure/pin');

    // Create a new collection.
    $this->clickLink(t('Add collection'));
    $edit = array();
    $machine_name = drupal_strtolower($this->randomName());
    $edit['name'] = $this->randomName();
    $edit['machine_name'] = $machine_name;
    $edit['description'] = $this->randomName();
    $edit['status'] = TRUE;
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertRaw(t('Created new collection %name.', array('%name' => $edit['name'])), t('Collection created successfully'));

    // Edit the collection.
    $this->drupalGet('admin/structure/pin');
    $this->assertText($edit['name'], t('Collection found in the collection overview listing.'));
    $this->clickLink(t('edit collection'));
    $edit = array();
    $edit['name'] = $this->randomName();
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalGet('admin/structure/pin');
    $this->assertText($edit['name'], t('Collection found in the collection overview listing.'));

    // Try to submit a collection with a duplicate machine name.
    $edit['machine_name'] = $machine_name;
    $this->drupalPost('admin/structure/pin/collection/add', $edit, t('Save'));
    $this->assertText(t('The machine-readable name is already in use. It must be unique.'));

    // Try to submit an invalid machine name.
    $edit['machine_name'] = '!&^%';
    $this->drupalPost('admin/structure/pin/collection/add', $edit, t('Save'));
    $this->assertText(t('The machine-readable name must contain only lowercase letters, numbers, and underscores.'));
  }

  /**
   * Delete a collection.
   */
  function testCollectionDelete() {
    // Create collection.
    $edit = array(
      'name' => $this->randomName(),
      'machine_name' => drupal_strtolower($this->randomName()),
    );
    $this->drupalPost('admin/structure/pin/collection/add', $edit, t('Save'));
    $this->assertText(t('Created new collection'), t('New collection was created.'));

    // Confirm collection was created.
    $collections = pinapi_collection_load_all();
    $cid = $collections[count($collections) - 1]->cid;
    $collection = pinapi_collection_load($cid);
    $this->assertTrue($collection, t('Collection found in database.'));

    // Delete collection.
    $edit = array();
    $this->drupalPost('admin/structure/pin/collection/' . $collection->cid . '/edit', $edit, t('Delete'));
    $this->assertRaw(t('Are you sure you want to delete this collection %name?', array('%name' => $collection->name)), t('[confirm deletion] Asks for confirmation.'));
    $this->assertText(t('This action cannot be undone.'), t('[confirm deletion] Inform that collection will be deleted.'));

    // Confirm deletion.
    $this->drupalPost(NULL, NULL, t('Delete'));
    $this->assertRaw(t('Deleted collection %name.', array('%name' => $collection->name)), t('Collection deleted'));
    pinapi_collection_static_reset();
    $this->assertFalse(pinapi_collection_load($cid), t('Collection is not found in the database'));
  }

}

/**
 * Tests for Pins.
 */
class PinAPIPinTest extends PinAPITestCase {

  public static function getInfo() {
    return array(
      'name' => 'Pin API Pin',
      'description' => 'Test the pin.',
      'group' => 'Pin API',
    );
  }

  function setUp() {
    parent::setUp('pinapi');
    $this->admin_user = $this->drupalCreateUser(array('administer pins'));
    $this->drupalLogin($this->admin_user);
    $this->collection = $this->createCollection();

    $this->pins = array();
    for ( $i = 0; $i < 5; $i++ ) {
      $this->pins[] = $this->createPin($this->collection);
    }
  }

  /**
   * Create pin.
   */
  function testPinCreate() {
    $pid = $this->pins[count($this->pins) - 1]->pid;
    $pin = pinapi_pin_load($pid);
    $this->assertTrue($pin, t('Pin found in database.'));
  }

  /**
   * Update pin.
   */
  function testPinUpdate() {
    // Check that changed timestamp is updated when saving.
    $pid = $this->pins[count($this->pins) - 1]->pid;
    $pin = pinapi_pin_load($pid);
    $changed = $pin->changed;
    sleep(1);
    pinapi_pin_save($pin);
    $this->assertTrue($changed != $pin->changed, t('Pin has updated changed timestamp.'));
  }

  /**
   * Delete pin.
   */
  function testPinDelete() {
    $pid = $this->pins[count($this->pins) - 1]->pid;
    $pin = pinapi_pin_load($pid);
    pinapi_pin_delete($pin->pid);
    $pin = pinapi_pin_load($pid);
    $this->assertFalse($pin, t('Pin not found in database.'));
  }
}