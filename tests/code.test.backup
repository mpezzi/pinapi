<?php 

/**
 * @file
 * Pin API module code tests.
 */

include_once(dirname(__FILE__) . '/pinapi.test');

class PinAPICodeTestCase extends PinAPITestCase {
  
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('PinAPI codes'),
      'description' => t('Tests codes'),
      'group' => t('PinAPI'),
    );
  }
  
  /**
   * Implements setUp().
   */
  function setUp() {
    parent::setUp();
    
    $this->testPinAPITestSuite();
  }
  
  /**
   * Implements tearDown().
   */
  function tearDown() {
    parent::tearDown();
  }
  
  /**
   * Test Code Redeem Functionality.
   */
  function testCodeRedeem() {
    //$this->drupalLogin($this->pinapi_users['authenticated']);
    
    // Create 200 test accounts.
    $accounts = array();
    for ( $i = 2; $i < 202; $i++ ) {
      $accounts[$i]->uid = $i;
    }
    
    // Redeem codes.
    foreach ( $this->testPinAPITestCodes() as $code ) {
      $this->assertTrue(pinapi_redeem($code, $this->pinapi_pool_id, $accounts[array_rand($accounts)]), t('Code was redeemed'));
      $last_code = $code;
    }
    
    // Ensure codes can't be redeemed twice.
    $this->assertFalse(pinapi_redeem($code, $this->pinapi_pool_id, $accounts[2]), t('Code cannot be redeemed twice'));
    
    // Ensure codes are moved to history.
    $result = db_result(db_query("SELECT COUNT(*) FROM {pinapi_code_redeemed} WHERE pool_id = %d", $this->pinapi_pool_id));
    $this->assertEqual($result, count($this->testPinAPITestCodes()), t('Code where copied to history'));
    
    // Check prize quantities.
    foreach ( $this->testPinAPITestPrizes() as $prize ) {
      $result = db_result(db_query("SELECT quantity FROM {pinapi_prize} WHERE pid = %d", $prize['pid']));
      $this->assertEqual($result, 0, t('Prize quantity depleted'));
    }
    
    //$this->drupalLogout();
  }
  
}